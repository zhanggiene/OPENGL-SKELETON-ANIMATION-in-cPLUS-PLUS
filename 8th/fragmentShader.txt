//
//  fragmentShader.c
//  second
//
//  Created by Zhang Zhuyan on 16/6/19.
//  Copyright Â© 2019 Zhang Zhuyan. All rights reserved.
//
#version 330 core

out vec4 FragColor;


struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

in vec3 FragPos;
in vec3 Normal;
in mat4 RandMatrix;


uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 cameraPosition;
uniform Material material;

void main()
{
   // vec3 ambient = 1.5*lightColor * material.ambient;
    
    
    
    
    // diffuse
    
   /* vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
   float diff = max(dot(norm, lightDir), 0.0);
   vec3 diffuse = 5*lightColor * (diff * material.diffuse);
    
    */
    
   // vec3 result =  diffuse;
   vec3 result= material.diffuse;
  //vec3 result=vec3(0.2f);
    //vec3 test1=normalize(test);
  //FragColor = vec4(test,1.0);
   // vec3 result = ambient + diffuse;
   FragColor = vec4(result, 1.0);
   // FragColor = RandMatrix*vec4( 5.0);
    //hiiiiiiiiiiiiii
 
}
